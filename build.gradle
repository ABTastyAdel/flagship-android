apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka-android'

def ABTastySDKVersion = '1.0.1' ///DEFINE HERE THE ABTASTY SDK VERSION
def ABTastySDKVersionCode = 1 ///DEFINE HERE THE ABTASTY SDK VERSION CODE

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        all {
            resValue("integer", "ABTastyVersionCode", "${ABTastySDKVersionCode}")
            resValue("string", "ABTastyVersion", "\"${ABTastySDKVersion}\"")
        }
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.name == android.buildTypes.release.name)
                outputFileName = "flagship-android-${ABTastySDKVersion}.aar"
        }
    }

}

androidExtensions {
    experimental = true
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "androidx.core:core-ktx:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
//    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "androidx.room:room-runtime:2.2.0-rc01"
    kapt "androidx.room:room-compiler:2.2.0-rc01"
}


repositories {
    mavenCentral()
}


bintray {
    user = keystoreProperties.getProperty("bintray_user")
    key = keystoreProperties.getProperty("bintray_key")


    pkg {
        repo = 'flagship-android'
        name = 'flagship-android'
//        userOrg = user
        userOrg = 'abtasty'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://doc-flagship-staging.netlify.com/android/'
        version {
            name = ABTastySDKVersion
        }
    }
    publications = ['toBintray']
}


publishing {
    publications {

        maven(MavenPublication) {

            groupId 'com.abtasty' //You can either define these here or get them from project conf elsewhere
            artifactId 'flagship-android'
            version ABTastySDKVersion
            artifact "$buildDir/outputs/aar/flagship-android-"+ABTastySDKVersion+".aar" //aar artifact you want to publish

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    if (dependency.name != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }

        toBintray(MavenPublication) {
            groupId 'com.abtasty'
            //You can either define these here or get them from project conf elsewhere
            artifactId 'flagship-android'
            version ABTastySDKVersion
            artifact "$buildDir/outputs/aar/flagship-android-" + ABTastySDKVersion + ".aar"
            //aar artifact you want to publish

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    if (dependency.name != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
}

repositories{
    maven {
        url = "$buildDir/publishing/"
    }
}

dokka {
    moduleName = 'reference'
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
//    outputDirectory = "/home/raph/Workspace/ABTasty/LibraryByApi-Documentation/ref"
    sourceDirs = files('src/main/java')
}

